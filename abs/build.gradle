apply plugin: 'org.akhikhl.wuff.eclipse-rcp-app'

dependencies {
    compile project(':cn.com.agree.ab.a4.server')
    compile project(":cn.com.agree.ab.a4.pub.communication.mina")

    compile project(":cn.com.agree.ab.a4.server.preference")
    compile project(":cn.com.agree.ab.a4.server.resource")
    compile project(":cn.com.agree.ab.a4.server.web")
}

wuff {
    selectedEclipseVersion = rootProject.ext.eclipseVersion
    wuffDir = new File(rootDir, rootProject.ext.eclipsePlugins as String)
    localMavenRepositoryDir = new File(wuffDir, 'm2_repository')
}

products {
    nativeLauncher = false
//    product platform: 'windows', arch: 'x86_32', launchers: ['windows', 'shell'], jre: 'C:\\dev\\tools\\java\\32bit\\jdk1.7.0_51\jre'
    product platform: 'windows', arch: 'x86_32', launchers: ['windows', 'shell']//, jre: 'C:\\dev\\tools\\java\\32bit\\jdk-8u112-windows-x86\\jre'
    product platform: 'windows', arch: 'x86_64', launchers: ['windows', 'shell']
    archiveProducts = true
}

apply from: new File(rootDir, 'methods.gradle')

afterEvaluate {
    def buildProducts = tasks.findAll {
        it.name.startsWith('buildProduct_')
    }
    buildProducts.each {
        it.doLast {
            def changelogTasks = tasks.findAll {
                it.name.startsWith('changelog_')
            }
            changelogTasks.each {
                println 'task start: ' + it
                it.execute()
            }
            println "beforeArchiveProduct: " + beforeArchiveProduct()
        }
    }
}

def beforeArchiveProduct() {
    if (!ext.has("methods")) {
        return false
    }
    File rootServer = new File(rootDir, 'ab/AB_Server/Basic/cn.com.agree.ab.a4.server/ROOT')

    File source = new File(rootServer, 'configuration')
    def fileNames = ['log4j.properties', 'abs.properties', 'abs_share.properties', 'agree.ks', 'AB_TEST.lic']
    File prefDir = new File(rootServer, 'preferenceServer')
    def prefs = ['preference.properties', 'default.properties']
    File csdDir = new File(rootServer, 'csdKey')
    def csd = ['jetty.crt', 'keystore']

    File output = new File(buildDir, 'output')
    File[] files = output.listFiles()
    Arrays.sort(files, new Comparator<File>() {
        @Override
        int compare(File o1, File o2) {
            return (int) (o2.lastModified() - o1.lastModified())
        }
    })
    if (files.length > 0) {
        File file = files[0] // get latest directory
        if (file.isDirectory()) {
            File target = new File(file, 'configuration')
            ext.methods.copyResources(fileNames, source, target)

            File plugins = new File(file, 'plugins')
            ext.methods.deleteBundle(project.name, plugins)

            File prefFile = new File(file, 'preferenceServer')
            ext.methods.copyResources(prefs, prefDir, prefFile)

            File csdFile = new File(file, 'csdKey')
            ext.methods.copyResources(csd, csdDir, csdFile)

            File config = new File(target, 'config.ini')
            ext.methods.changeConfig(config, 'cn.com.agree.ab.a4.server.product')

//            ext.methods.copyResources(['workspace'], rootServer, new File(file, 'workspace'))

            ext.methods.copyResourcesWithEncode(['changelog-ab.md', 'changelog-adore.md'], new File(buildDir, 'changelogs'), file, 'GBK', 'UTF-8')
        }
    }
    return true
}