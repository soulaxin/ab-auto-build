import java.nio.charset.Charset

buildscript {
    repositories {
//        mavenLocal()
//        mavenCentral()
//        jcenter()
        maven {
            url 'http://192.9.200.153:8081/nexus/content/groups/public/'
        }
    }

    dependencies {
//    classpath 'org.akhikhl.wuff:wuff-plugin:+'

        classpath "org.akhikhl.unpuzzle:unpuzzle-plugin:0.0.22"
        classpath "commons-configuration:commons-configuration:1.10"

//        def dir = new File(rootDir, 'wuff/libs/wuff-plugin/build')
//        def clazz = new File(dir, 'classes/main')
//        def resource = new File(dir, 'resources/main')
//        classpath files(clazz, resource)

        def wuff_plugins = new File(rootDir, 'plugins')
        classpath files(new File(wuff_plugins, 'wuff-plugin-0.0.20.1.jar'))

        classpath "se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.53"
    }
}

ext.eclipseVersion = '4.7.1a' as String
if (hasProperty("EV")) {
    ext.eclipseVersion = "$EV"
}
ext.encoding = Charset.defaultCharset().name()
logger.println "use eclipse version: " + rootProject.ext.eclipseVersion
logger.println "use file encoding: " + rootProject.ext.encoding

ext.productVersion = '' as String
if (hasProperty("V")) {
    ext.productVersion = "$V"
}

ext.product_list = ['abc', 'abs'] as List
ext.eclipse_bundles = ['cn.com.agree.cocktail', 'cn.com.agree.ab.a4.client.gui.adore'] as List
ext.upload_bundles = [
        "cn.com.agree.ab.a4.client.adore.aft",
        "cn.com.agree.ab.a4.client.device",
        "cn.com.agree.ab.a4.client.gui.adore.picture",
        "cn.com.agree.ab.a4.client.gui.adore",
        "cn.com.agree.ab.a4.client.preference",
        "cn.com.agree.ab.a4.client.resource",
        "cn.com.agree.ab.a4.pub.adr",
        "cn.com.agree.ab.a4.pub.alr",
        "cn.com.agree.ab.a4.pub.auf",
        "cn.com.agree.ab.a4.pub.communication.mina",
        "cn.com.agree.ab.a4.pub.communication",
        "cn.com.agree.ab.a4.pub.contextconfigurator",
        "cn.com.agree.ab.a4.pub.data",
        "cn.com.agree.ab.a4.pub.distinct",
        "cn.com.agree.ab.a4.pub.engine",
        "cn.com.agree.ab.a4.pub.exception",
        "cn.com.agree.ab.a4.pub.extension",
        "cn.com.agree.ab.a4.pub.lfc.pinyin",
        "cn.com.agree.ab.a4.pub.lfc",
        "cn.com.agree.ab.a4.pub.lucene",
        "cn.com.agree.ab.a4.pub.monitor",
        "cn.com.agree.ab.a4.pub.mpt",
        "cn.com.agree.ab.a4.pub.preferences",
        "cn.com.agree.ab.a4.pub.prerequisite",
        "cn.com.agree.ab.a4.pub.resource",
        "cn.com.agree.ab.a4.pub.runtime.platform",
        "cn.com.agree.ab.a4.pub.runtime",
        "cn.com.agree.ab.a4.pub.tad",
        "cn.com.agree.ab.a4.pub.trade",
        "cn.com.agree.commons.csv",
        "cn.com.agree.commons.encrypt",
        "cn.com.agree.commons.util",
        "cn.com.agree.adore2"
] as List

subprojects {
    repositories {
//        mavenLocal()
//        mavenCentral()
//        jcenter()
        maven {
            url 'http://192.9.200.153:8081/nexus/content/groups/public/'
        }
    }

    apply plugin: 'java'

    // JVM 版本号要求
//    sourceCompatibility = 1.7
//    targetCompatibility = 1.7

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    if (rootProject.ext.product_list.contains(project.name)) {
        apply from: new File(rootDir, 'changelog.gradle')

        if (rootProject.ext.productVersion) {
            version = rootProject.ext.productVersion
        }
        return
    }
    if (rootProject.ext.eclipse_bundles.contains(project.name)) {
        apply plugin: 'org.akhikhl.wuff.eclipse-bundle'
    } else {
        apply plugin: 'org.akhikhl.wuff.osgi-bundle'
    }

    wuff {
        selectedEclipseVersion = rootProject.ext.eclipseVersion
        if (rootProject.hasProperty("EP")) {
            String ep = rootProject.property("EP")
            wuffDir = new File(rootDir, ep)
            localMavenRepositoryDir = new File(wuffDir, 'm2_repository')
        }
    }
    if (name == 'cn.com.agree.ab.a4.client') {
        def sourcePath = 'src/cn/com/agree/ab/a4/client/'
        def targetPath = 'cn/com/agree/ab/a4/client/'
        def sourceSplash = 'splash_online.png'
        def source = sourcePath + sourceSplash
        jar {
            from(source) {
                into targetPath
            }
        }

        if (rootProject.ext.eclipseVersion == '4.7.1a') {
            afterEvaluate {
                project.dependencies.add 'compile', "${eclipseMavenGroup}:org.apache.batik.util:+"
                project.dependencies.add 'compile', "${eclipseMavenGroup}:org.eclipse.osgi.util:+"
                project.dependencies.add 'compile', "${eclipseMavenGroup}:org.eclipse.e4.core.di.extensions.supplier:+"
            }
        }
    }

    if (name == 'cn.com.agree.commons.csv' || name == 'cn.com.agree.ab.a4.pub.extension.eclipse') {
        dependencies {
            compile project(':org.apache.log4j')
        }
    }

    if (name == 'cn.com.agree.ab.a4.pub.communication.balance.random') {
        dependencies {
            compile project(':cn.com.agree.ab.a4.pub.communication')
        }
    }

    if (name == 'cn.com.agree.adore2') {
        afterEvaluate {
            def dependencies = project.configurations.getByName('compile').dependencies
            def dep = dependencies.find { it.version == "1.1.50.android" }
            dependencies.remove(dep)
        }
    }

    if (name == 'cn.com.agree.ab.a4.client.web' || name == 'cn.com.agree.ab.a4.server.web') {
        afterEvaluate {
            project.dependencies.add 'compile', "${eclipseMavenGroup}:org.eclipse.jetty.security:+"
            project.dependencies.add 'compile', "${eclipseMavenGroup}:javax.el:+"
        }
    }

    if (name == 'cn.com.agree.ab.a4.server') {
        afterEvaluate {
            project.dependencies.add 'compile', "${eclipseMavenGroup}:org.eclipse.update.configurator:+"
        }
    }

    if (name == 'cn.com.agree.cocktail') {
        jar {
            from('src/cn/com/agree/cocktail/client.gif') {
                into 'cn/com/agree/cocktail'
            }
        }
    }

    if (name == 'cn.com.agree.commons.logging') {
        jar {
            from('src/commons-logging.properties') {
                into ''
            }
            from('logging.properties') {
                into ''
            }
        }
    }

    if (name == 'cn.com.agree.international') {
        jar {
            from('src/cn/com/agree/international') {
                include '*.properties'
                into 'cn/com/agree/international'
            }
        }
    }

    if (rootProject.ext.upload_bundles.contains(name)) {
        apply plugin: 'maven-publish'
        task sourceJar(type: Jar) {
            from sourceSets.main.allJava
        }
        group = 'cn.com.agree'
        String agree_repo = "http://192.9.200.153:8081/nexus/content/repositories/product_release/"
        String repo = agree_repo
        if (rootProject.hasProperty("remoteRepo")) {
            repo = agree_repo + "${remoteRepo}/"
        }
        if (rootProject.hasProperty("localRepo")) {
            repo = "file://C:/tmp/repos/${localRepo}"
        }
        publishing {
            repositories {
                maven {
                    credentials {
                        username "admin"
                        password "admin123"
                    }
                    url repo
                }
            }
            publications {
                mavenJava(MavenPublication) {
                    pom.withXml {
                        Node pomNode = asNode()
                        def node = pomNode.get("dependencies")
                        if (node) {
                            pomNode.remove(node)
                        }
                    }
                    from components.java

                    artifact sourceJar {
                        classifier "sources"
                    }
                }
            }
        }
    }
}

task upload_bundles {
    group 'upload'
    rootProject.ext.upload_bundles.each { bundle ->
        dependsOn childProjects.get(bundle).publish
    }
}

apply from: new File(rootDir, 'methods.gradle')
if (!ext.has("methods")) {
    return
}

def addProductDep(File product, Project target) {
    def plugins = ext.methods.getPlugins(product)

    for (def p : plugins) {
        def proj = subprojects.find { it.name == p && it.name != "org.eclipse.osgi" }
        if (proj != null) {
            println target.name + " add dep: " + p
            target.dependencies.add 'compile', project(":" + p)
        }
    }
}

afterEvaluate {
    File absDir = project(':cn.com.agree.ab.a4.server').projectDir
    File abs = new File(absDir, "abs.product")
    addProductDep(abs, project(":abs"))

    File adoreDir = project(':cn.com.agree.ab.a4.client.gui.adore').projectDir
    File adore = new File(adoreDir, "abc_adore.product")
    addProductDep(adore, project(":abc"))
}