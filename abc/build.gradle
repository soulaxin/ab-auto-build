apply plugin: 'org.akhikhl.wuff.eclipse-rcp-app'

dependencies {
    compile project(":cn.com.agree.ab.a4.client")
    compile project(":cn.com.agree.ab.a4.pub.communication.mina")
    compile project(":cn.com.agree.ab.a4.client.gui.adore.win32")
    compile project(":cn.com.agree.ab.a4.client.preference")
    compile project(":cn.com.agree.ab.a4.client.update.plugin")
}

wuff {
    selectedEclipseVersion = rootProject.ext.eclipseVersion
    if (rootProject.hasProperty("EP")) {
        String ep = rootProject.property("EP")
        wuffDir = new File(rootDir, ep)
        localMavenRepositoryDir = new File(wuffDir, 'm2_repository')
    }
}

products {
//    product jre: 'C:\\dev\\tools\\java\\32bit\\jdk1.7.0_51\\jre'
//    product jre: 'C:\\dev\\tools\\java\\32bit\\jdk-8u112-windows-x86\\jre'
//    additionalFilesToArchive = ["C:\\dev\\workspaces\\abc\\bundles.gradle"]
    jvmArgs = ['-Djava.library.path=./interface/engine']
    String javaHome = System.getProperty("java.home")
    javaHome.endsWith("jre") ? javaHome : javaHome + "/jre"
    product platform: 'windows', arch: 'x86_32', launchers: ['windows'], jre: javaHome
    product platform: 'windows', arch: 'x86_64', launchers: ['windows']
    product platform: 'linux', arch: 'x86_32', launchers: ['windows']
    product platform: 'linux', arch: 'x86_64', launchers: ['windows']
    archiveProducts = true
}

apply from: new File(rootDir, 'methods.gradle')

afterEvaluate {
    def buildProducts = tasks.findAll {
        it.name.startsWith('buildProduct_')
    }
    buildProducts.each {
        it.doLast {
            def changelogTasks = tasks.findAll {
                it.name.startsWith('changelog_')
            }
            changelogTasks.each {
                println 'task start: ' + it
                it.execute()
            }
            println "beforeArchiveProduct: " + beforeArchiveProduct()
        }
    }
}

def beforeArchiveProduct() {
    if (!ext.has("methods")) {
        return false
    }
    File rootCefClient = new File(rootDir, 'ab/AB_Client/CEF/cn.com.agree.ab.a4.client.gui.adore/ROOT')

    File source = new File(rootCefClient, 'configuration')
    def fileNames = ['log4j.properties', 'abc.properties']
    def engine = 'interface/engine'

    File output = new File(buildDir, 'output')
    File[] files = output.listFiles()
    Arrays.sort(files, new Comparator<File>() {
        @Override
        int compare(File o1, File o2) {
            return (int) (o2.lastModified() - o1.lastModified());
        }
    })
    if (files.length > 0) {
        File file = files[0] // get latest directory
        if (file.isDirectory()) {
            def engineDir = new File(file, engine)
            ext.methods.copyResources([engine], rootCefClient, engineDir)

            File target = new File(file, 'configuration')
            ext.methods.copyResources(fileNames, source, target)

            ext.methods.copyResourcesWithEncode(['changelog-ab.md', 'changelog-adore.md'], new File(buildDir, 'changelogs'), file, rootProject.ext.encoding, 'UTF-8')

            File plugins = new File(file, 'plugins')

            ext.methods.deleteBundle('org.eclipse.osgi_3.9.1.v20140110-1610.jar', plugins)
            ext.methods.deleteBundle('org.eclipse.osgi_3.12.50.v20170928-1321.jar', plugins)
            ext.methods.deleteBundle(project.name, plugins)
            File config = new File(target, 'config.ini')
            ext.methods.changeProperties(config, 'eclipse.application', 'cn.com.agree.ab.a4.client.app')
            ext.methods.changeConfig(config, 'cn.com.agree.ab.a4.client.product')
        }
    }
    return true
}